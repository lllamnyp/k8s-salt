{# vi: set ft=sls : #}

{% set k8s_salt = {} %}
{% set id = salt['grains.get']('id') %}

# Deep merge nested dicts
{%- macro deep_merge(a, b) %}
  {%- for k,v in b.items() %}
    {%- if v is not defined %}
      {%- do a.pop(k) %}
    {%- else %}
      {%- if v is mapping %}
        {%- if a[k] is not mapping %}
          {%- do a.update({ k: { } }) %}
        {%- endif %}
        {%- do deep_merge(a[k], v) %}
      {%- else %}
        {%- do a.update({ k: v }) %}
      {%- endif %}
    {% endif %}
  {%- endfor %}
{%- endmacro %}

### Check if it's worth even running the template
{%- set cluster = salt['pillar.get']('k8s_salt:cluster') %}
{%- set host_info = salt['pillar.get']('k8s_overdata:host_info', {}) %}

{%- set etcd_ids = salt['pillar.get']('k8s_overdata:inverted_roles:'~cluster~':etcd', []) %}
{%- set api_ids = salt['pillar.get']('k8s_overdata:inverted_roles:'~cluster~':controlplane', []) %}
{%- set etcd_info = {} %}
{%- set api_info = {} %}

{% for id in etcd_ids %}
{% do etcd_info.update({id:{'hostname_fqdn':host_info[id]['hostname_fqdn'],'ip':host_info[id]['ip']} }) %}
{% endfor %}
{% for id in api_ids %}
{% do api_info.update({id:{'hostname_fqdn':host_info[id]['hostname_fqdn'],'ip':host_info[id]['ip']} }) %}
{% endfor %}

{% macro comma_separated(prefix, dict, attribute, suffix) -%}
{% for k, v in dict.items() %}{{ prefix }}{{ v[attribute] }}{{ suffix }}{% if not loop.last %},{% endif %}{% endfor %}
{%- endmacro %}

{% macro map_comma_separated(attribute1, prefix, dict, attribute2, suffix) -%}
{% for k, v in dict.items() %}{{ v[attribute1] }}{{ prefix }}{{ v[attribute2] }}{{ suffix }}{% if not loop.last %},{% endif %}{% endfor %}
{%- endmacro %}

{% do k8s_salt.update({'hostname_fqdn':salt['pillar.get']('k8s_overdata:host_info:'~id~':hostname_fqdn', "")}) %}
{% do k8s_salt.update({'ip':salt['pillar.get']('k8s_overdata:host_info:'~id~':ip', "")}) %}

# K8s cluster properties
{% do k8s_salt.update({'service_cidr':salt['pillar.get']('k8s_salt:service_cidr') or '10.143.0.0/16'}) %}
{% do k8s_salt.update({'cluster_cidr':salt['pillar.get']('k8s_salt:cluster_cidr') or '10.142.0.0/16'}) %}
# TODO: derive service ip from service cidr
{% do k8s_salt.update({'api_service_ip':salt['pillar.get']('k8s_salt:api_service_ip') or '10.143.0.1'}) %}
# TODO: derive service ip from service cidr
{% do k8s_salt.update({'dns_service_ip':salt['pillar.get']('k8s_salt:dns_service_ip') or '10.143.0.2'}) %}
{% do k8s_salt.update({'upstream_dns':salt['pillar.get']('k8s_salt:upstream_dns') or ['/etc/resolv.conf']}) %}
{% do k8s_salt.update({'api_extra_ips':salt['pillar.get']('k8s_salt:api_extra_ips') or []}) %}
{% do k8s_salt.update({'api_extra_dns':salt['pillar.get']('k8s_salt:api_extra_dns') or []}) %}
{% do k8s_salt.update({'cluster_domain':salt['pillar.get']('k8s_salt:cluster_domain') or 'cluster.local'}) %}
{% do k8s_salt.update({'apiserver_balancer_url':salt['pillar.get']('k8s_salt:apiserver_balancer_url') or 'localhost'}) %}
{% do k8s_salt.update({'apiserver_port':salt['pillar.get']('k8s_salt:apiserver_port') or '6443'}) %}
{% do k8s_salt.update({'apiserver_balancer_port':salt['pillar.get']('k8s_salt:apiserver_balancer_port') or k8s_salt['apiserver_port']}) %}
{% do k8s_salt.update({'container_runtime':salt['pillar.get']('k8s_salt:container_runtime') or 'remote'}) %}
{% do k8s_salt.update({'container_runtime_endpoint':salt['pillar.get']('k8s_salt:container_runtime_endpoint') or 'unix:///var/run/containerd/containerd.sock'}) %}

# TODO: template apiVersions depending on k8s version?
{% do k8s_salt.update({
  'kube-proxy':{
    'config':{
      'kind':'KubeProxyConfiguration',
      'apiVersion':'kubeproxy.config.k8s.io/v1alpha1',
      'clientConnection':{
        'kubeconfig':'/etc/kubernetes/config/proxy.kubeconfig'
      },
      'mode':'iptables',
      'clusterCIDR':k8s_salt['cluster_cidr']
    },
    'flags':{
      'config':'/etc/kubernetes/config/kube-proxy-config.yaml',
      'hostname-override':k8s_salt['hostname_fqdn']
    }
  },
  'kubelet':{
    'config':{
      'kind':'KubeletConfiguration',
      'apiVersion':'kubelet.config.k8s.io/v1beta1',
      'enableServer':True,
      'authentication':{
        'anonymous':{
          'enabled':False
        },
        'webhook':{
          'enabled':True
        },
        'x509':{
          'clientCAFile':'/etc/kubernetes/pki/kube-ca.pem'
        }
      },
      'authorization':{
        'mode':'Webhook'
      },
      'clusterDomain':k8s_salt['cluster_domain'],
      'clusterDNS':[k8s_salt['dns_service_ip']],
      'maxPods':110,
      'podCIDR':'',
      'resolvConf':'/etc/resolv.conf',
      'rotateCertificates':True,
      'runtimeRequestTimeout':'15m',
      'tlsCertFile':'/etc/kubernetes/pki/kubelet.pem',
      'tlsPrivateKeyFile':'/etc/kubernetes/pki/kubelet-key.pem',
      'logging':{
        'format':'json',
        'sanitization':False
      }
    },
    'flags':{
      'config':'/etc/kubernetes/config/kubelet-config.yaml',
      'kubeconfig':'/etc/kubernetes/config/kubelet.kubeconfig',
      'container-runtime':k8s_salt['container_runtime'],
      'container-runtime-endpoint':k8s_salt['container_runtime_endpoint'],
      'network-plugin':'cni',
      'register-node':'true',
      'hostname-override':k8s_salt['hostname_fqdn'],
      'v':2
    }
  },
  'kube-scheduler':{
    'config':{
      'apiVersion':'kubescheduler.config.k8s.io/v1beta1',
      'clientConnection':{
        'kubeconfig':'/etc/kubernetes/config/scheduler.kubeconfig'
      },
      'kind':'KubeSchedulerConfiguration',
      'leaderElection':{
        'leaderElect':True
      }
    },
    'flags':{
      'config':'/etc/kubernetes/config/kube-scheduler-config.yaml',
      'v':'2'
    }
  },
  'kube-controller-manager':{
    'flags':{
      'allocate-node-cidrs':'true',
      'bind-address':'0.0.0.0',
      'cloud-provider':'""',
      'cluster-cidr':k8s_salt['cluster_cidr'],
      'cluster-name':salt['pillar.get']('k8s_salt:cluster'),
      'cluster-signing-cert-file':'/etc/kubernetes/pki/kube-ca.pem',
      'configure-cloud-routes':'false',
      'kubeconfig':'/etc/kubernetes/config/controller.kubeconfig',
      'leader-elect':'true',
      'logging-format':'json',
      'port':'0',
      'root-ca-file':'/etc/kubernetes/pki/kube-ca.pem',
      'service-account-private-key-file':'/etc/kubernetes/pki/sa-key.pem',
      'service-cluster-ip-range':k8s_salt['service_cidr'],
      'use-service-account-credentials':'true',
      'v':'2'
    }
  },
  'kube-apiserver':{
    'hosts': api_info,
    'flags':{
      'advertise-address':k8s_salt['ip'],
      'allow-privileged':'true',
      'anonymous-auth':'false',
      'apiserver-count':(api_ids | length),
      'audit-log-maxage':'30',
      'audit-log-maxbackup':'3',
      'audit-log-maxsize':'100',
      'audit-log-path':'/var/log/k8s/audit.log',
      'authorization-mode':'Node,RBAC',
      'bind-address':'0.0.0.0',
      'client-ca-file':'/etc/kubernetes/pki/kube-ca.pem',
      'cloud-provider':'""',
      'enable-admission-plugins':'NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,NodeRestriction,Priority,TaintNodesByCondition,PersistentVolumeClaimResize',
      'enable-aggregator-routing':'true',
      'etcd-cafile':'/etc/kubernetes/pki/etcd-trusted-ca.pem',
      'etcd-certfile':'/etc/kubernetes/pki/etcdclient.pem',
      'etcd-keyfile':'/etc/kubernetes/pki/etcdclient-key.pem',
      'etcd-prefix':'/registry',
      'etcd-servers':comma_separated('https://', etcd_info, 'hostname_fqdn', ':2379'),
      'kubelet-certificate-authority':'/etc/kubernetes/pki/kube-ca.pem',
      'kubelet-client-certificate':'/etc/kubernetes/pki/apiserver.pem',
      'kubelet-client-key':'/etc/kubernetes/pki/apiserver-key.pem',
      'kubelet-preferred-address-types':'InternalIP,ExternalIP,Hostname',
      'profiling':'false',
      'proxy-client-cert-file':'/etc/kubernetes/pki/proxy-client.pem',
      'proxy-client-key-file':'/etc/kubernetes/pki/proxy-client-key.pem',
      'requestheader-allowed-names':'kube-apiserver-proxy-client',
      'requestheader-client-ca-file':'/etc/kubernetes/pki/requestheader-ca.pem',
      'requestheader-extra-headers-prefix':'X-Remote-Extra-',
      'requestheader-group-headers':'X-Remote-Group',
      'requestheader-username-headers':'X-Remote-User',
      'runtime-config':'api/all=true',
      'secure-port':k8s_salt['apiserver_port'],
      'service-account-issuer':'https://' + k8s_salt['apiserver_balancer_url'] + ':' + k8s_salt['apiserver_balancer_port'],
      'service-account-lookup':'true',
      'service-account-key-file':'/etc/kubernetes/pki/sa.pem',
      'service-account-signing-key-file':'/etc/kubernetes/pki/sa-key.pem',
      'service-cluster-ip-range':k8s_salt['service_cidr'],
      'service-node-port-range':'30000-32767',
      'storage-backend':'etcd3',
      'tls-cert-file':'/etc/kubernetes/pki/apiserver.pem',
      'tls-private-key-file':'/etc/kubernetes/pki/apiserver-key.pem',
      'tls-cipher-suites':'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305'
    }
  },
  'etcd':{
    'hosts': etcd_info,
    'flags':{
      'name':k8s_salt['hostname_fqdn'],
      'cert-file':'/etc/kubernetes/pki/etcd-trusted.pem',
      'key-file':'/etc/kubernetes/pki/etcd-trusted-key.pem',
      'peer-cert-file':'/etc/kubernetes/pki/etcd-peer.pem',
      'peer-key-file':'/etc/kubernetes/pki/etcd-peer-key.pem',
      'trusted-ca-file':'/etc/kubernetes/pki/etcd-trusted-ca.pem',
      'peer-trusted-ca-file':'/etc/kubernetes/pki/etcd-peer-ca.pem',
      'peer-client-cert-auth':'true',
      'client-cert-auth':'true',
      'initial-advertise-peer-urls':'https://' + k8s_salt['hostname_fqdn'] + ':2380',
      'listen-peer-urls':'https://0.0.0.0:2380',
      'listen-client-urls':'https://0.0.0.0:2379',
      'advertise-client-urls':'https://' + k8s_salt['hostname_fqdn'] + ':2379',
      'initial-cluster-token':cluster,
      'initial-cluster':map_comma_separated('hostname_fqdn', '=https://', etcd_info, 'hostname_fqdn', ':2380'),
      'initial-cluster-state':'new',
      'logger':'zap',
      'data-dir':'/var/lib/etcd'
    }
  }
}) %}

{% for svc in ['kube-proxy', 'kube-apiserver', 'kube-controller-manager', 'kube-scheduler', 'kubelet', 'etcd'] %}
  {% set svc_config = salt['pillar.get']('k8s_salt:'~svc) %}
  {% if svc_config is mapping %}
    {% do deep_merge(k8s_salt[svc], svc_config) %}
  {% endif %}
{% endfor %}

{% set addons = salt['pillar.get']('k8s_salt').get('addons', {}) %}
{% do k8s_salt.update({'addons':addons}) %}

{% do k8s_salt.update({'arch':salt['pillar.get']('k8s_salt:arch') or salt['grains.get']('osarch') or 'amd64'}) %}
{% do k8s_salt.update({'cas':['kube-ca','etcd-peer-ca','etcd-trusted-ca','requestheader-ca']}) %}

# Hostname is also a problem


# Signing policy constraints
{% set allowed_minions = {
                           'etcd-peer-ca':'I@k8s_salt:roles:etcd:True',
                           'etcd-trusted-ca':'I@k8s_salt:roles:etcd:True or I@k8s_salt:roles:controlplane:True or I@k8s_salt:roles:admin:True',
                           'requestheader-ca':'I@k8s_salt:roles:controlplane:True',
                           'kube-ca':'I@k8s_salt:roles:controlplane:True or I@k8s_salt:roles:worker:True or I@k8s_salt:roles:admin:True'
                         } %}
{% do k8s_salt.update({'allowed_minions':allowed_minions}) %}

# CA server
{% do k8s_salt.update({'ca_server':salt['pillar.get']('k8s_overdata:ca_server:id', "")}) %}

# Version info
{% do k8s_salt.update({'version_kubernetes':salt['pillar.get']('k8s_salt:version:kubernetes') or '1.21.0'}) %}
{% do k8s_salt.update({'version_etcd':salt['pillar.get']('k8s_salt:version:etcd') or 'v3.4.15'}) %}
{% do k8s_salt.update({'version_cni':salt['pillar.get']('k8s_salt:version:cni') or 'v0.9.1'}) %}
{% do k8s_salt.update({'version_haproxy':salt['pillar.get']('k8s_salt:version:haproxy') or '2.4.*'}) %}

# Proxy repos (if necessary)
{% do k8s_salt.update({'k8s_proxy_repo':salt['pillar.get']('k8s_salt:k8s_proxy_repo') or 'https://storage.googleapis.com/kubernetes-release/release'}) %}
{% do k8s_salt.update({'etcd_proxy_repo':salt['pillar.get']('k8s_salt:etcd_proxy_repo') or 'https://github.com/etcd-io/etcd/releases/download'}) %}
{% do k8s_salt.update({'cni_proxy_repo':salt['pillar.get']('k8s_salt:cni_proxy_repo') or 'https://github.com/containernetworking/plugins/releases/download'}) %}
{% do k8s_salt.update({'haproxy_proxy_repo':salt['pillar.get']('k8s_salt:haproxy_proxy_repo') or 'http://ppa.launchpad.net/vbernat/haproxy-2.4/ubuntu'}) %}
{% do k8s_salt.update({'haproxy_repo_key':salt['pillar.get']('k8s_salt:haproxy_repo_key') or 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xcffb779aadc995e4f350a060505d97a41c61b9cd'}) %}

# Ignore checksum (if necessary)
{% do k8s_salt.update({'k8s_binaries_skip_checksum':salt['pillar.get']('k8s_salt:k8s_binaries_skip_checksum') or False}) %}
{% do k8s_salt.update({'cni_skip_checksum':salt['pillar.get']('k8s_salt:cni_skip_checksum') or False}) %}
{% do k8s_salt.update({'cni_skip_download':salt['pillar.get']('k8s_salt:cni_skip_download') or False}) %}
{% do k8s_salt.update({'etcd_skip_checksum':salt['pillar.get']('k8s_salt:etcd_skip_checksum') or False}) %}
{% do k8s_salt.update({'etcd_skip_download':salt['pillar.get']('k8s_salt:etcd_skip_download') or False}) %}

# K8s binaries
{% set binaries = [] %}
{% if salt['pillar.get']('k8s_salt:roles:controlplane') %}
{% do binaries.append('kube-apiserver') %}
{% do binaries.append('kube-scheduler') %}
{% do binaries.append('kube-controller-manager') %}
{% endif %}
{% if salt['pillar.get']('k8s_salt:roles:worker') %}
{% if not k8s_salt['kube-proxy'].get('disabled', False) %}
{% do binaries.append('kube-proxy') %}
{% endif %}
{% do binaries.append('kubelet') %}
{% endif %}
{% if salt['pillar.get']('k8s_salt:roles:admin') %}
{% do binaries.append('kubectl') %}
{% endif %}
{% do k8s_salt.update({'k8s_binaries':binaries}) %}

{% do salt.log.debug(k8s_salt) %}


### End check if it's worth rendering template
